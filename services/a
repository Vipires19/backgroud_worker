import cv2
import numpy as np
import mediapipe as mp
import os
import tempfile
from mediapipe.framework.formats import landmark_pb2

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

def draw_landmarks_on_frame(frame, landmarks_list):
    if landmarks_list:
        mp_landmarks = landmark_pb2.NormalizedLandmarkList(landmark=landmarks_list)
        mp_drawing.draw_landmarks(
            frame,
            mp_landmarks,
            mp_pose.POSE_CONNECTIONS,
            landmark_drawing_spec=mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
            connection_drawing_spec=mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=2)
        )
    return frame

def generate_comparative_video(frames_ref, landmarks_ref, frames_exec, landmarks_exec):
    if not frames_ref or not frames_exec:
        print("[ERRO] Lista de frames vazia.", flush=True)
        return None

    target_width = 480
    target_height = 270
    min_frames = max(len(frames_ref), len(frames_exec))

    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    video_path = temp_file.name
    temp_file.close()

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(video_path, fourcc, 30.0, (target_width * 2, target_height))

    if not out.isOpened():
        print(f"[ERRO] VideoWriter não abriu corretamente para {video_path}", flush=True)
        return None

    print(f"[INFO] Iniciando gravação no arquivo: {video_path}", flush=True)

    for i in range(min_frames):
        try:
            frame_ref = frames_ref[i] if i < len(frames_ref) else frames_ref[-1]
            frame_exec = frames_exec[i] if i < len(frames_exec) else frames_exec[-1]
            landmark_ref = landmarks_ref[i] if i < len(landmarks_ref) else landmarks_ref[-1]
            landmark_exec = landmarks_exec[i] if i < len(landmarks_exec) else landmarks_exec[-1]

            frame_ref = draw_landmarks_on_frame(frame_ref.copy(), landmark_ref)
            frame_exec = draw_landmarks_on_frame(frame_exec.copy(), landmark_exec)

            frame_ref = cv2.resize(frame_ref, (target_width, target_height))
            frame_exec = cv2.resize(frame_exec, (target_width, target_height))

            combined = np.hstack((frame_ref, frame_exec))
            out.write(combined)
        except Exception as e:
            print(f"[ERRO] Erro ao processar frame {i}: {e}", flush=True)

    out.release()

    if not os.path.exists(video_path) or os.path.getsize(video_path) < 1000:
        print(f"[ERRO] Vídeo não foi salvo corretamente em {video_path}", flush=True)
        return None

    print(f"[INFO] Vídeo salvo em {video_path} ({os.path.getsize(video_path)} bytes)", flush=True)
    return video_path

def save_and_upload_comparative_video(frames_ref, landmarks_ref, frames_exec, landmarks_exec, upload_path, s3_client, bucket_name):
    print("[UPLOAD] Iniciando geração do vídeo comparativo...", flush=True)

    video_path = generate_comparative_video(frames_ref, landmarks_ref, frames_exec, landmarks_exec)

    if not video_path:
        print("[ERRO] Vídeo não foi gerado no caminho esperado.", flush=True)
        return None

    try:
        s3_client.upload_file(
            Filename=video_path,
            Bucket=bucket_name,
            Key=upload_path,
            ExtraArgs={"ContentType": "video/mp4"}
        )
        print(f"[UPLOAD] Vídeo enviado com sucesso para {upload_path}", flush=True)
        os.remove(video_path)
        return upload_path
    except Exception as e:
        print(f"[ERRO] Falha ao subir vídeo para R2: {e}", flush=True)
        return None
